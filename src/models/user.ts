import { UUID_NS_URL } from "../constants";
class User {
  /**
   * name
   */
  public static initializeTable() {
    const schema = `
      BEGIN TRANSACTION;
      CREATE TABLE IF NOT EXISTS users (
        uuid        uuid DEFAULT uuid_generate_v5(uuid_ns_url(), '${UUID_NS_URL}') NOT NULL,
        email       varchar(255) NOT NULL,
        password    varchar(255) NOT NULL,
        pw_func     varchar(255) NOT NULL DEFAULT "pbkdf2",
        pw_alg      varchar(255) NOT NULL DEFAULT "sha512",
        pw_cost     integer DEFAULT 5000 NOT NULL CHECK (pw_cost >= 3000),
        pw_key_size integer NOT NULL DEFAULT 512,
        pw_nonce    varchar(255) NOT NULL,
        pw_auth     varchar(255) NOT NULL,
        pw_salt     varchar(255) NOT NULL,
        created_at  timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL,
        updated_at  timestamptz DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY(uuid)
      );
      CREATE UNIQUE INDEX IF NOT EXISTS email_unique_id on users (LOWER(email));
      COMMIT;
    `;
  }

  /** The email of the user. */
  public email: string;
  /**
   * The password for this user.
   * Passwords must be manipulated before being sent to the server.
   */
  public password: string;
  /** The number of iterations to use for KDF. */
  public pwCost: string;
  /** Generated by the client during registration. */
  public pwSalt: string;

  constructor(email: string, password: string, pwCost: string, pwSalt: string) {
    this.email = email;
    this.password = password;
    this.pwCost = pwCost;
    this.pwSalt = pwSalt;
  }
}
